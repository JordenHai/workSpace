面向对象

世界万物 皆可分类
世界万物 皆为对象

只要是对象 就肯定属于某种品类
只要是对象 就肯定有属性

对于生活的提炼 总结


你是上帝

地球 啥都没有除了土？？
造物主

使程序的维护和扩展变得简单 提高开发效率 使人更加理解


特性
class

 一个类即是对一类拥有相同属性的对象的抽象、蓝图、原型

object
一个对象是一个类实例化后的实例，
一个类必须实例化之后才能在程序中调用

Encapsulation封装
在类中对数据的赋值 内部调用对外部用户是透明的
这使类变成了一个胶囊或容器 里面包含着类的数据和方法

Inheritance继承
一个类可以派生出子类
在这个父类里定义的属性 方法
自动被子类继承
节省代码
动物{飞禽{...}，走兽{...}}
大的类 里面有共有属性
个性类只需要继承就oK

都能呼吸
都能吃喝拉撒睡！！
一生出来就不吃不喝就GG



Polymorphism多态
一个借口，多个实现

你的老板让所有的员工开始九点钟工作
而不需要说，你是销售你要开始销售工作等
只要是员工就开始在，知道这一点即可。
每个员工各司其职，做各自的工作

写重复代码是非常不好的低级行为
你写的代码会经常变更




语法

调用函数 --> 执行 ---> 返回结果


#属性
#方法

类变量的用途 大家公用的属性
class Person
    cn = "中国"
    def __init__(self,name,addr)
        self.name = name

P1 = Person(name,age,addr)
#构造函数
析构函数:在实例释放、销毁的时候执行 通常用于一些收尾工作

私有方法
私有属性

成员变量

类变量
实例变量

类方法

属性方法
@property
 把一个方法变成静态属性


反射

    hasattr(obj,choice)，判断一个对象是否有对应的字符串的方法
    getattr(obj,choice)，根据字符串去获的方法的内存地址取obj对象里面
    setattr(obj,'y',v) is equivalent to obj.y = v
    delattr()